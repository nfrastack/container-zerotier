#!/command/with-contenv bash

add_bash_completion() {
    cat <<EOF >> /root/.bashrc

## Zerotier Bash Completions
_zerotier_get_network_ids () {
        COMPREPLY=(\$(compgen -W "\$(ls -1 /var/lib/zerotier-one/networks.d | cut -c 1-16)" -- \${cur}))
}

_zerotier_get_network_ids_from_history () {
    COMPREPLY=(\$(compgen -W "\$(fc -l -1000 -1 | sed -n 's/.*\([[:xdigit:]]\{16\}\).*/\1/p')" -- \${cur}))
}

_zerotier_zerotier-cli_completions() {
    local cur prev

    cur=\${COMP_WORDS[COMP_CWORD]}
    prev=\${COMP_WORDS[COMP_CWORD-1]}

    case \${COMP_CWORD} in
        1)
            COMPREPLY=(\$(compgen -W "info listpeers peers listnetworks join leave set get listmoons orbit deorbit" -- \${cur}))
            ;;
        2)
            case \${prev} in
                leave)
                    _zerotier_get_network_ids
                ;;
                join)
                    _zerotier_get_network_ids_from_history
                ;;
                set)
                    _zerotier_get_network_ids
                ;;
                get)
                    _zerotier_get_network_ids
                ;;
                *)
                    COMPREPLY=()
                ;;
            esac
            ;;
        *)
            COMPREPLY=()
            ;;
    esac
}

complete -F _zerotier_zerotier-cli_completions zerotier-cli
##
EOF
}

bootstrap_filesystem() {
    case "${1}" in
        client )
            if [ ! -d "${CLIENT_DATA_PATH}" ]; then
                mkdir -p "${CLIENT_DATA_PATH}"
            fi
            if [ "$(stat -c %U "${CLIENT_DATA_PATH}")" != "${CLIENT_USER}" ] ; then chown "${CLIENT_USER}":zerotier "${CLIENT_DATA_PATH}" ; fi
            ln -sf "${CLIENT_DATA_PATH}" /var/lib/zerotier-one
        ;;
        controller )
            if [ ! -d "${CONTROLLER_DATA_PATH}" ]; then
                mkdir -p "${CONTROLLER_DATA_PATH}"
            fi
            if [ "$(stat -c %U "${CONTROLLER_DATA_PATH}")" != "${CLIENT_USER}" ] ; then chown "${CLIENT_USER}":zerotier "${CONTROLLER_DATA_PATH}" ; fi
            ln -sf "${CONTROLLER_DATA_PATH}" /var/lib/zerotier-one
        ;;
        dns )
            mkdir -p /etc/coredns/
            chown -R "${DNS_USER}":zerotier /etc/coredns/
            if [ ! -d "${DNS_DATA_PATH}" ]; then
                mkdir -p "${DNS_DATA_PATH}"
            fi
            if [ "$(stat -c %U "${DNS_DATA_PATH}")" != "coredns" ] ; then chown "${DNS_USER}":zerotier "${DNS_DATA_PATH}" ; fi
        ;;
        logs )
            if [ ! -d "${LOG_PATH}" ]; then
                mkdir -p "${LOG_PATH}"
            fi
            if [ "$(stat -c %G "${LOG_PATH}")" != "zerotier" ] ; then chown -R zerotier:zerotier "${LOG_PATH}" ; fi
        ;;
        ui )
            :
        ;;
    esac
}


configure_client() {
    if var_false "${CLIENT_ENABLE_METRICS}" ; then ln -sf /dev/null "${CLIENT_DATA_PATH}"/metrics.prom ; fi
    cat <<EOF > "${CLIENT_DATA_PATH}"/local.conf
  {
    "settings": {
        "primaryPort": ${CLIENT_LISTEN_PORT},
        "portMappingEnabled": ${CLIENT_ENABLE_PORT_MAPPING,,},
        "softwareUpdate": "disable",
        "allowTcpFallbackRelay": ${CLIENT_ALLOW_TCP_FALLBACK_RELAY,,}
    }
  }
EOF

    transform_file_var \
                        CLIENT_IDENTITY_PUBLIC \
                        CLIENT_IDENTITY_PRIVATE \
                        CLIENT_NETWORK

    if [ -n "${CLIENT_IDENTITY_PUBLIC}" ] ; then
        echo "${CLIENT_IDENTITY_PUBLIC}" > "${CLIENT_DATA_PATH}"/identity.public
    fi

    if [ -n "${CLIENT_IDENTITY_PRIVATE}" ] ; then
        if [ -n "${CLIENT_IDENTITY_PUBLIC}" ] ; then
            _client_identity_public=${CLIENT_IDENTITY_PUBLIC}
        elif [ -f "${CLIENT_DATA_PATH}"/identity.public ] ; then
            _client_identity_public=$(cat "${CLIENT_DATA_PATH}"/identity.public)
        else
            print_error "Need Controller Public identity environment variable or existing file"
            exit 1
        fi
        echo "${_client_identity_public}:${CLIENT_IDENTITY_PRIVATE}" > "${CLIENT_DATA_PATH}"/identity.secret
    fi

    if [ -n "${CLIENT_NETWORK}" ] ; then
        mkdir -p "${CLIENT_DATA_PATH}"/networks.d
        _client_network_list=$(echo "${CLIENT_NETWORK}" | tr ' ' '\n')

        _client_join_network() {
            print_info "[zerotier-client] Joining $1"
            touch "%{CLIENT_DATA_PATH}"/"$1".conf
        }

        for ztnetwork in $_client_network_list ; do
            [[ "${ztnetwork}" =~ ^[[:space:]]*# ]] && continue
                if [ -f ${ztnetwork} ] ; then
                print_debug "[zerotier-client] [network] Reading networks from file"
                while read ztline; do
                [[ "${ztline}" =~ ^[[:space:]]*# ]] && continue
                    _client_join_network $(echo ${ztline} | awk '{print $1}')
                done < "$ztnetwork"
            else
                _client_join_network $ztnetwork
            fi
        done
    fi
}

configure_controller() {
    if var_false "${CONTROLLER_ENABLE_METRICS}" ; then ln -sf /dev/null "${CONTROLLER_DATA_PATH}"/metrics.prom ; fi
    for management_network in ${CONTROLLER_MANAGEMENT_NETWORKS//,/$IFS}; do
        management_networks=${management_networks}"\"${management_network}\","
    done
    management_networks=$(echo ${management_networks} | sed "s|,$||g")
    cat <<EOF > "${CONTROLLER_DATA_PATH}"/local.conf
  {
    "settings": {
        "primaryPort": ${CONTROLLER_LISTEN_PORT},
        "portMappingEnabled": ${CONTROLLER_ENABLE_PORT_MAPPING,,},
        "softwareUpdate": "disable",
        "allowManagementFrom": [${management_networks}],
        "allowTcpFallbackRelay": ${CONTROLLER_ALLOW_TCP_FALLBACK_RELAY,,}
    }
  }
EOF

    transform_file_var \
                        CONTROLLER_IDENTITY_PUBLIC \
                        CONTROLLER_IDENTITY_PRIVATE \
                        CONTROLLER_NETWORK

    if [ -n "${CONTROLLER_IDENTITY_PUBLIC}" ] ; then
        echo "${CONTROLLER_IDENTITY_PUBLIC}" > "${CONTROLLER_DATA_PATH}"/identity.public
    fi

    if [ -n "${CONTROLLER_IDENTITY_PRIVATE}" ] ; then
        if [ -n "${CONTROLLER_IDENTITY_PUBLIC}" ] ; then
            _controller_identity_public=${CONTROLLER_IDENTITY_PUBLIC}
        elif [ -f "${CONTROLLER_DATA_PATH}"/identity.public ] ; then
            _controller_identity_public=$(cat "${CONTROLLER_DATA_PATH}"/identity.public})
        else
            print_error "Need Controller Public identity environment variable or existing file"
            exit 1
        fi
        echo "${_controller_identity_public}:${CONTROLLER_IDENTITY_PRIVATE}" > "${CONTROLLER_DATA_PATH}"/identity.secret
    fi

    if [ -n "${CONTROLLER_NETWORK}" ] ; then
        mkdir -p "${CONTROLLER_DATA_PATH}"/networks.d
        _controller_network_list=$(echo "${CONTROLLER_NETWORK}" | tr ' ' '\n')

        _controller_join_network() {
            print_info "[zerotier-controller] Joining $1"
            touch "%{CONTROLLER_DATA_PATH}"/"$1".conf
        }

        for ztnetwork in $_controller_network_list ; do
            [[ "${ztnetwork}" =~ ^[[:space:]]*# ]] && continue
                if [ -f ${ztnetwork} ] ; then
                print_debug "[zerotier-controller] [network] Reading networks from file"
                while read ztline; do
                [[ "${ztline}" =~ ^[[:space:]]*# ]] && continue
                    _controller_join_network $(echo ${ztline} | awk '{print $1}')
                done < "$ztnetwork"
            else
                _controller_join_network $ztnetwork
            fi
        done
    fi
}

configure_dns() {
    sanity_var ZTNET_API_TOKEN "Personal + Org API Token from ZTNET"
    set -o posix ; set | grep -E '^(DNS_LISTEN_PORT=|LOG_PATH=|ZTNET_API_HOST=|ZTNET_AUTH_HEADER=|ZT_NETWORKS=)' > /etc/coredns/.env
    sed -i "s|^DNS_|COREDNS_|g" /etc/coredns/.env
    case "${DNS_OUTPUT_FORMAT,,}" in
        both )
                echo "${DNS_UPDATE_PERIOD} source /etc/coredns/.env ; s6-setuidgid ${DNS_USER} /usr/local/bin/ztnet-dns-companion --mode hosts --file >/dev/null 2>&1 ; s6-setuidgid ${DNS_USER} /usr/local/bin/ztnet-dns-companion --mode zones --file >/dev/null 2>&1" >> /assets/cron/crontab.txt
            ;;
        host* )
                echo "${DNS_UPDATE_PERIOD} source /etc/coredns/.env ; s6-setuidgid ${DNS_USER} /usr/local/bin/ztnet-dns-companion --mode hosts --file >/dev/null 2>&1" >> /assets/cron/crontab.txt
            ;;
        zone* )
                echo "${DNS_UPDATE_PERIOD} source /etc/coredns/.env ; s6-setuidgid ${DNS_USER} /usr/local/bin/ztnet-dns-companion --mode zones --file >/dev/null 2>&1" >> /assets/cron/crontab.txt
            ;;
    esac
    echo "${DNS_UPDATE_PERIOD} source /etc/coredns/.env ; s6-setuidgid ${DNS_USER} /usr/local/bin/ztnet-dns-companion --file >/dev/null 2>&1" >> /assets/cron/crontab.txt
}

configure_ui() {
    sanity_var UI_SITE_URL "Site URL eg https://example.com"

    sed -i "s|{{UI_LISTEN_PORT}}|${UI_LISTEN_PORT}|g" /etc/nginx/sites.enabled/${NGINX_SITE_ENABLED}.conf

    transform_file_var \
                        DB_HOST \
                        DB_NAME \
                        DB_PASS \
                        DB_PORT \
                        DB_USER

    if [ -n "${UI_DB_HOST}" ]; then DB_HOST=${DB_HOST:-${UI_DB_HOST}}; fi
    if [ -n "${UI_DB_NAME}" ]; then DB_NAME=${DB_NAME:-${UI_DB_NAME}}; fi
    if [ -n "${UI_DB_PASS}" ]; then DB_PASS=${DB_PASS:-${UI_DB_PASS}}; fi
    if [ -n "${UI_DB_PORT}" ]; then DB_PORT=${DB_PORT:-${UI_DB_PORT}}; fi
    if [ -n "${UI_DB_USER}" ]; then DB_USER=${DB_USER:-${UI_DB_USER}}; fi

    db_ready pgsql

    cat << EOF >> /app/.env
DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=public
ZT_ADDR=${ZT_ADDR}
NEXT_PUBLIC_APP_VERSION=${ZT_NET_VERSION}

EOF

    envFilename='.env.production'
    nextFolder='/app/.next/'

    cd /app
    print_info "[ui] Applying migrations to the database"
    silent npx prisma migrate deploy
    silent print_info "[ui] Migrations applied successfully"

    silent print_info "[ui] Seeding the database"
    silent npx prisma db seed
    silent print_info "[ui] Database seeded successfully"

    if [ -z "${UI_SECRET}" ]; then
        UI_SECRET=$(openssl rand -base64 32)
        print_warn "You should set a UI_SECRET environment variable to a secure value"
    fi

    echo "NEXTAUTH_URL=\"${UI_SITE_URL}\"" >> /app/.env
    echo "NEXT_PUBLIC_APP_VERSION=${ZTNET_VERSION}" >> /app/.env
    echo "PORT=${UI_LISTEN_PORT}" >> /app/.env
    echo "NEXTAUTH_SECRET=${UI_SECRET}" >> /app/.env
    echo "AUTH_SECRET=${UI_SECRET}" >> /app/.env
    echo "NEXT_PUBLIC_SITE_NAME=${UI_SITE_NAME}" >> /app/.env

    update_template /etc/nginx/sites.enabled/ztnet.conf HOSTNAME
}

setup_container_mode() {
    if [ -f "/tmp/.container/toi_zerotier/CONTAINER_MODE" ]; then
        print_debug "Importing MODE environment generated variables"
        source /tmp/.container/toi_zerotier/CONTAINER_MODE
    else
        mkdir -p /tmp/.container/toi_zerotier/
        modes=$(echo "${MODE}" | tr "," "\n")
        for mode in $modes ; do
            case "${mode,,}" in
                "client" )
                    print_debug "Enabling Container Mode for: CLIENT"
                    echo "ENABLE_CLIENT=TRUE" >> /tmp/.container/toi_zerotier/CONTAINER_MODE
                ;;
                "controller" )
                    print_debug "Enabling Container Mode for: CONTROLLER"
                    echo "ENABLE_CONTROLLER=TRUE" >> /tmp/.container/toi_zerotier/CONTAINER_MODE
                ;;
                "dns" )
                    print_debug "Enabling Container Mode for: DNS"
                    echo "ENABLE_DNS=TRUE" >> /tmp/.container/toi_zerotier/CONTAINER_MODE
                ;;
                "ui" )
                    print_debug "Enabling Container Mode for: UI"
                    echo "ENABLE_UI=TRUE" >> /tmp/.container/toi_zerotier/CONTAINER_MODE
                ;;
                "standalone" | "manual" )
                    print_debug "Enabling Container Mode for: STANDALONE"
                    echo "ENABLE_STANDALONE=TRUE" >> /tmp/.container/toi_zerotier/CONTAINER_MODE
                ;;
                *)
                    print_error "Unknown 'MODE' environment variable - exitting.."
                    exit 1
                ;;
            esac
        done
        source /tmp/.container/toi_zerotier/CONTAINER_MODE
    fi
}
